SOLTION 1: 

FIND DUPLICATE NUMBER.

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int n=nums.size();int ans=0;
        sort(nums.begin(),nums.end());
        for(int i=0;i<n;i++){
            if(nums[i]==nums[i+1]){
                ans=nums[i];
            }
        }
        return ans;
    }
};

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

SOUTION 2:

SORT COLOR.

class Solution {
public:
    void sortColors(vector<int>& nums) {
        // sort(nums.begin(),nums.end());
        int n=nums.size();
        for(int i=0;i<n;i++){
            for(int j=0;j<n-i-1;j++){
                if(nums[j] > nums[j+1]){
                    swap(nums[j],nums[j+1]);
                }
            }
        }
    }
};

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

SOLUTION 3: 

REMOVE DUPLICATES FROM SORTED ARRAY.

class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        int n=nums.size();
        int j=0;
        for(int i=0;i<n;i++){
            if(nums[i]!=nums[j]){
                j++;
                nums[j]=nums[i];
            }
        }
        return j+1;
    }
};

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

SOLUTION 4:

SET MATRIX ZERO.

class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
       int m=matrix.size();
       int n=matrix[0].size();
       int x=1;
       int y=1;
       for(int j=0;j<n;j++){
           if(matrix[0][j]==0)x=0;
       }
       for(int i=0;i<m;i++){
           if(matrix[i][0]==0)y=0;
       }
       for(int i=1;i<m;i++){
           for(int j=1;j<n;j++){
               if(matrix[i][j]==0){
                   matrix[0][j]=0;
                   matrix[i][0]=0;
               }
           }
       }
       for(int j=1;j<n;j++){
           if(matrix[0][j]==0){
               for(int i=1;i<m;i++){
                   matrix[i][j]=0;
               }
           }
       }
       for(int i=1;i<m;i++){
           if(matrix[i][0]==0){
               for(int j=1;j<n;j++){
                   matrix[i][j]=0;
               }
           }
       }
       if(y==0){
           for(int j=0;j<n;j++){
               matrix[0][j]=0;
           }
       }
       if(x==0){
           for(int i=0;i<m;i++){
               matrix[i][0]=0;
           }
       }
    }
};

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

SOLUTION 5:

MOVE ZEROES.

class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        int nonZero=0;
        for(int i=0;i<nums.size();i++){
            if(nums[i] != 0){
                swap(nums[i],nums[nonZero]);
                nonZero++;
            }
        }
    }
};

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

SOLUTION 6:

BUY AND SELL (1) .

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int mini=INT_MAX;
        int max_profit=0;
        for(int i=0;i<prices.size();i++){
        if(prices[i] < mini){
            mini=prices[i];
        }
        else if(prices[i]-mini>max_profit){
            max_profit=prices[i]-mini;
        }
    }
     return max_profit;
    }
};

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

SOLUTION 7:

class Solution{
public:
long long findMinDiff(vector<long long> a, long long n, long long m){
        
        sort(a.begin(),a.end());
        int i=0;
        int j=i+m-1;
        long long int mini=INT_MAX;
        while(j < n){
            long long int diff = a[j] - a[i];
            mini=min(diff,mini);
            i++;j++;
        }
        return mini;
    } 
};

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


